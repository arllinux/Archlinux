#########  Installation d'une Archlinux  #####################
#
# Au lancement on arrive sur un teminal qui est auto connecté.
#
##############################################################

####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####
L'invite se présente sous cette forme :
"root@archiso #"
Il n'y a pas les crochets qui encadre l'invite [ ]
Ceci indique que l'on travaille à partir du CD ou de la clé
####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####

# loadkeys fr-pc

# ip address show

Optionnel
Si le réseau ne fonctionne pas :
# dhcpcd enpS03
Puis
# systemctl stop dhcpcd.service


# timedatectl
# timedatectl set-ntp true



4 - Partitionnement des disques
####~~~~~~~~~~~~~~~~~~~~~~~####
Dans cet exemple le disque virtuel fait 21G

# cfdisk
Select label type
"dos"

# /dev/sda1 pour le /boot		100M
# /dev/sda2 pour la swap		Fonction de la RAM
# /dev/sda3 pour le /				8G
# /dev/sda4 pour le /home		Le reste du disque



=========================================================================
Ici on peut utiliser un script qui est à récupérer à l'adresse suivante :
# wget http://sloteur.free.fr/arllinux/scripts.tar.gz

# tar xvzf scripts.tar.gz
# cd scripts

# 00_partitionnement.sh
# 01_mirroirs.sh
# pacstrap /mnt base base-devel
# 02_genfstab.sh


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Si l'on a pas exécuté le script : "00_formatage.sh"
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
5 - Formatage des partitions
####~~~~~~~~~~~~~~~~~~~~####

# mkfs.ext2 /dev/sda1
# mkfs.ext4 /dev/sda3
# mkfs.ext4 /dev/sda4

La swap est créée en utilisant mkswap : 
# mkswap /dev/sda2


6 - Montage des partitions
####~~~~~~~~~~~~~~~~~~####
Historiquement les points de montage manuel se font dans /mnt
Nous allons créer la configuration de notre futur système dans
le répertoire "/mnt de notre système live."

# mount /dev/sda3 /mnt

Pour créer le(s) dossier(s) utilisateur, il nous faut monter la partition /home
# mkdir /mnt/home && mount /dev/sda4 /mnt/home

"Le swap doit également être activé" pour être détecté lors de la création du fstab à suivre :
# swapon /dev/sda2

Si vous avez un /boot séparé, il faut aussi le monter :
# mkdir /mnt/boot && mount /dev/sda1 /mnt/boot



7 - Sélection des mirroirs pour installation  du système de base
####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Si l'on a pas exécuté le script : "01_mirroirs.sh"
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Sélection du miroir
Commençons par créer un fichier de backup de /usr/bin/rankmirrors :
# cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup

Editons maintenant le fichier backup.
Nous allons décommenter TOUS les miroirs afin que rankmirrors puisse les tester.
Pour se faire, sed s'avère très utile.
# sed -s 's/^#Server/Server/' /etc/pacman.d/mirrorlist.backup

Pour finir, nous allons laisser rankmirrors trouver les 10 meilleurs miroirs
et écrire le résultat directement dans /etc/pacman.d/mirrorlist
# rankmirrors -n 10 /etc/pacman.d/mirrorlist.backup > /etc/pacman.d/mirrorlist

L'attente peut durer jusqu'a 5 minutes ou plus. Gardez votre calme...



8 - Installation des paquets de base
####~~~~~~~~~~~~~~~~~~~~~~~~~~~~####

# pacstrap /mnt base base-devel





9 - Configuration du système
####~~~~~~~~~~~~~~~~~~~~####

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#### Automatisé par le script 02_genfstab du dépot git ####
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


Générer le /mnt/etc/fstab

# genfstab -U -p /mnt >> /mnt/etc/fstab



10 - Chrooter dans le nouveau système :
####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####

# arch-chroot /mnt

####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####
A partir de maintenant l'invite se présente sous cette forme :
"[root@archiso /] #"
Ceci indique que l'on travaille dans le répertoire /mnt
####~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~####



11 - Réglages de base :
####~~~~~~~~~~~~~~~####
Notes :
- Dans les instructions suivantes la machine locale sera nommée : "virtualarch"
- La commande "echo" écrit la chaine de caractère dans la console
- ">" envoie le résultat de "echo" dans le fichier spécifié en "écrasant" le contenu
- ">>" envoie le résultat de "echo" dans le fichier spécifié "à la suite" le contenu

Note 2 : Pour récupérer la documentation et utiliser les scripts,
il faut installer git :
# pacman -S git vim
(j'ai rajouté vim puisqu'on y est :)

D'abord :
Pour accéder au répertoire /root de notre système monté dans /mnt
# cd /root
# git clone https://github.com/arllinux/archlinux

Pour un peu plus de confort :
1 : # cd archlinux/scripts
2 : # ./000_config_git.sh
3 : # ./02_param.consoles.sh
Après l'exécution de param.consoles.sh, taper la commande "cd"
pour revenir dans le répertoire de root.
Pour activer la coloration :
# source .bashrc
# cd archlinux/scripts
4 : # ./03_adjustInit.sh




!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#### Automatisé par le script 03_adjustInit du dépot git ####
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# echo virtualarch > /etc/hostname

# echo '127.0.1.1 virtualarch.virtualbox virtualarch' >> /etc/hosts

# rm /etc/localtime

# ln -s /usr/share/zoneinfo/Europe/Paris /etc/localtime

# readlink -f /etc/localtime
/usr/share/zoneinfo/Europe/Paris

# vi /etc/locale.gen
fr-FR.URF-8 UTF-8

# locale-gen
Generating locales...
	fr-FR.UTF-8... done
Generation complete.


# echo LANG="fr_FR.UTF-8" > /etc/locale.conf


# export LANG=fr_FR.UTF-8


# echo KEYMAP=fr > /etc/vconsole.conf

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#### Fin de l'automatisation du script 03_adjustInit ####
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



Configurez /etc/mkinitcpio.conf et créez les RAMdisks initiaux avec :

# mkinitcpio -p linux
La commande doit se terminer par :
==> Image generation successful

Définissez un mot passe pour le root :
				 
# passwd


12 - Installation d'un bootloader
####~~~~~~~~~~~~~~~~~~~~~~~~~####

Installation
Pour prendre en compte le nouveau dépot pour yaourt
# pacman -Sy
# pacman -S grub


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#### Automatisé par le script 04_booloader du dépot git ####
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# grub-install --target=i386-pc --no-floppy --recheck /dev/sda
Installation pour la plate-forme i386-pc.
Installation terminée, sans erreur.

# grub-mkconfig -o /boot/grub/grub.cfg
Création du fichier de configutation GRUB
Image Linux trouvée : /boot/vmlinuz-linux
Found initrd images(s) in /boot: initramfs-linux.img
Found fallback intird images(s) in /boot: initramfs-linux-fallback.img
fait


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#### Fin de l'automatisation du script 04_bootloader ####
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



13 - Démonter le tout
####~~~~~~~~~~~~~####

# exit ou (Ctrl + d)

Attention à sortir de /mnt si vous êtes dedans sinon la commande retourne :
(umount: /mnt: target is busy)

# umount -R /mnt

Éteindre l'ordinateur :

# shutdown -h now

Comme la procédure a été faite sur une machine virtuelle,
la commande "reboot" relancerais l'image disque.
C'est pourquoi une fois la machine éteinte il faut éjecter l'image disque.

A ce niveau nous avons un système fonctionnel.
La suite de la procédure dans : "002_PostInstall"

-- Fin --
